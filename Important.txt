Spring DATA JPA Pagination  
https://docs.spring.io/spring-data/rest/docs/2.0.0.M1/reference/html/paging-chapter.html

Marshling and Unmarshling 
https://tutorialspointexamples.com/jaxb-marshalling-convert-java-object-to-xml-example-using-one-pojo/


==================
HashMap Internal Working 
https://examples.javacodegeeks.com/core-java/maphashmap-works-internally-java/
==================

React Modal Backdrop 
https://react-bootstrap.github.io/react-overlays/#modals

"react-bootstrap": "^0.32.1",

import {
  ControlLabel,
  Form,
  FormControl,
  FormGroup,
  HelpBlock,
  Checkbox,
  Button,
  Table,
  Modal
} from "react-bootstrap";

const customStyles = {
  content: {
    top: "50%",
    left: "50%",
    right: "auto",
    bottom: "auto",

    transform: "translate(-50%, -50%)"
  }
};
const customStylesnewMerchant = {
  content: {
    width: "500px",
    top: "50%",
    left: "50%",
    right: "auto",
    bottom: "auto",
    marginRight: "-50%",
    transform: "translate(-50%, -50%)"
  }
};

-------------------------
<Modal
          backdrop={"static"}
          show={this.state.IsOpen}
          onHide={this.closeModal}
          style={customStyles}
          aria-labelledby="New  Modal"
        >
          <Modal.Header>
            <Modal.Title id="new" className="text-center">
              <div className="  row">
                <div className="col-sm-10 text-left ">
                  <h4 className="modal-title  ">New </h4>
                </div>
                <div className="col-sm-2 text-center">
                  <button
                    type="button"
                    className="close"
                    onClick={this.closeModal}
                  >
                    &times;
                  </button>
                </div>
              </div>
            </Modal.Title>
          </Modal.Header>
          <Modal.Body>
         
            <div className="modal-body">
            
                
            </div>
          </Modal.Body>
          <Modal.Footer>
            <div className="row text-center justified">
              <button
                type="button"
                className=" btn btn-primary  btn-md"
                onClick={this.state.closeModal}
              >
                Close
              </button>
              
            </div>
          </Modal.Footer>
        </Modal>
        ///////https://react-bootstrap.github.io/getting-started/introduction

public static Date getFormattedEndDateTime(Date date) {
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 59);
		cal.set(Calendar.SECOND, 59);
		return cal.getTime();
	}
	
	
	 XSSFWorkbook workbook = new XSSFWorkbook(file.getInputStream());
			XSSFSheet sheet = workbook.getSheetAt(0);
			
			
			REACT Didmount 
			https://www.jqwidgets.com/react/react-grid/react-grid-dataexport.htm
			
			
			////Removinfg cache from client side 
			
			public class SecurityConfig extends WebSecurityConfigurerAdapter { 
@Override
public void configure(HttpSecurity http) throws Exception {
   http.headers().defaultsDisabled()
        .addHeaderWriter(new StaticHeadersWriter("Cache-Control"," no-cache,max-age=0, must-revalidate"))
        .addHeaderWriter(new StaticHeadersWriter("Expires","0"));
 }
}

///////////////

logs in spring

WEB-INF\jboss-deployment-structure.xml

<jboss-deployment-structure>
    <deployment>
        <exclusions>
            <module name='org.slf4j' />
            <module name='org.slf4j.impl' />
        </exclusions>
    </deployment>
</jboss-deployment-structure>

=================================

resources\logback-spring.xml


<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<include resource="org/springframework/boot/logging/logback/defaults.xml" />
	<property name="LOG_FILE" value="/logs/filename.log" />

	<springProfile name="dev">
		<include
			resource="org/springframework/boot/logging/logback/console-appender.xml" />
		<appender name="ROLLING-FILE"
			class="ch.qos.logback.core.rolling.RollingFileAppender">
			<encoder>
				<pattern>%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{70}.%M - %msg%n
				</pattern>
			</encoder>
			<file>${LOG_FILE}</file>
			<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
				<fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd_HH}.log</fileNamePattern>
			</rollingPolicy>
		</appender>
		<root level="INFO,ERROR">
			<appender-ref ref="CONSOLE" />
			<appender-ref ref="ROLLING-FILE" />
		</root>
	</springProfile>

	<springProfile name="prod">
		<appender name="ROLLING-FILE"
			class="ch.qos.logback.core.rolling.RollingFileAppender">
			<encoder>
				<pattern>%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{70}.%M - %msg%n
				</pattern>
			</encoder>
			<file>${LOG_FILE}</file>
			<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
				<fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd_HH}.log</fileNamePattern>
			</rollingPolicy>
		</appender>
		<root level="INFO,ERROR">
			<appender-ref ref="ROLLING-FILE" />
		</root>
	</springProfile>

</configuration>

=========================
React Alert (Dialog ) 
<MYModals onRef={ref => (this.MYModals = ref)} />


--------------------

import React, { Component } from "react";
import Dialog from "react-bootstrap-dialog";

class MYModals extends Component {
  componentDidMount() {
    this.props.onRef(this);
  }
  componentWillUnmount() {
    this.props.onRef(undefined);
  }

  showAlert(msg) {
    // alert code start
    this.dialog.show({
      body: <h4 className="text-center">{msg}</h4>,
      actions: [Dialog.OKAction()],
      bsSize: "medium",
      onHide: dialog => {
        dialog.hide();
      }
    });
  } // alert code end

  render() {
    return (
      <Dialog
        ref={el => {
          this.dialog = el;
        }}
      />
    );
  }
}
export default MYModals;

===========================

@SuppressWarnings({ "unchecked", "rawtypes" })
	@ExceptionHandler(MyException.class)
	public final ResponseEntity<Object> handleTIGSException(MyException ex, WebRequest request, Locale locale) {

		logger.error("Error Code: " + ex.getErrorCode() + "Error Message: " + ex.getErrorMessage());
		ApiResponse apiResponse = null;
		if (ex.getErrors() != null && !ex.getErrors().isEmpty()) {
			apiResponse = new ApiResponse(ex.getErrorCode(), ex.getErrors().toString().substring(1, ex.getErrors().toString().length() - 1));
		} else {
			apiResponse = new ApiResponse(ex.getErrorCode(),
					messageSource.getMessage(ex.getErrorCode(), new Object[] {}, locale));
		}
		
		logger.error("TIGSException: " + apiResponse.getStatusCode() + "|"+ apiResponse.getStatusMessage());
		return new ResponseEntity(apiResponse, HttpStatus.EXPECTATION_FAILED);
	}
